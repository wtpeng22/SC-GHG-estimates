scale_fill_manual("Histogram Legend", values=c("blue", "paleturquoise2")) + # manually assign histogram fill colors
geom_vline(aes(xintercept = 3, colour="LINE DARK BLUE"), linetype="twodash", size = 1) + # where aes colour is vline label
scale_colour_manual("Line Legend", values="darkblue") + # manually assign vline colors
scale_x_continuous(breaks = seq(0, 202, 10)) +
ggtitle("Time Difference")  +
xlab("Time in Days") +
ylab("Amount") +
theme_light() +
theme(panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(size = 0.5, linetype = "solid", colour = "black"),
axis.line.y = element_line(size = 0.5, linetype = "solid", colour = "black"))
bp_overall +
geom_histogram(data = subset(df, Time_Diff <= 12.5), aes(x = Time_Diff, fill="BAR BLUE"), binwidth = 5) + # subset for blue data, where aes fill is fill group 1 label
geom_histogram(data = subset(df, Time_Diff > 12.5), aes(x = Time_Diff, fill="BAR TURQUOISE"), binwidth = 5) + # subset for turquoise data, where aes fill is fill group 2 label
scale_fill_manual("Histogram Legend", values=c("blue", "paleturquoise2")) + # manually assign histogram fill colors
geom_vline(aes(xintercept = 3, colour="LINE DARK BLUE"), linetype="twodash", size = 1)
bp_overall <- ggplot(data = df)
bp_overall +
geom_histogram(data = subset(df, Time_Diff <= 12.5), aes(x = Time_Diff, fill="BAR BLUE"), binwidth = 5) +
geom_histogram(data = subset(df, Time_Diff > 12.5), aes(x = Time_Diff, fill="BAR TURQUOISE"), binwidth = 5) +
scale_fill_manual(name="Legend", values=c("blue", "paleturquoise2")) +
geom_vline(aes(xintercept = 3, colour="LINE DARK BLUE"), linetype="twodash", size = 1) +
scale_colour_manual(name="", values="darkblue") +
scale_x_continuous(breaks = seq(0, 202, 10)) +
ggtitle("Time Difference")  +
xlab("Time in Days") +
ylab("Amount") +
theme_light() +
theme(panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line.x = element_line(size = 0.5, linetype = "solid", colour = "black"),
axis.line.y = element_line(size = 0.5, linetype = "solid", colour = "black"),
legend.spacing.y = unit(0, "cm"),
legend.margin=margin(t=0, r=0.5, b=0, l=0.5, unit="cm")) +
guides(fill = guide_legend(order = 1),
colour = guide_legend(order = 2))
library(ggplot2)
df1 <- data.frame(cond = factor( rep(c("A","B"), each=200) ),
rating = c(rnorm(200),rnorm(200, mean=.8)))
df2 <- data.frame(x=c(.5,1),cond=factor(c("A","B")))
ggplot(df1, aes(x=rating, fill=cond)) +
geom_histogram(binwidth=.5, position="dodge") +
geom_vline(data=df2,aes(xintercept=x,linetype=factor(cond)),
show_guide=TRUE) +
labs(fill='Stochastic',linetype='Deterministic')
ggplot(data=df1, aes(x=rating, fill=cond)) +
geom_vline(data=df2,aes(xintercept=x,linetype=factor(cond)),
show_guide=TRUE) +
geom_histogram(binwidth=.5, position="dodge") +
geom_vline(xintercep=df2$x,linetype=c(1,3))+
labs(fill='Stochastic',linetype='Deterministic')
ggplot(data=df1, aes(x=rating, fill=cond)) +
geom_vline(data=df2,aes(xintercept=x,linetype=factor(cond)),
show_guide=TRUE) +
geom_histogram(binwidth=.5, position="dodge")
ggplot(data=df1, aes(x=rating, fill=cond)) +
geom_vline(data=df2,aes(xintercept=x,linetype=factor(cond)),
show_guide=TRUE) +
geom_histogram(binwidth=.5, position="dodge") +
geom_vline(xintercep=df2$x,linetype=c(1,3))
ggplot(data=df1, aes(x=rating, fill=cond)) +
geom_vline(data=df2,aes(xintercept=x,linetype=factor(cond)),
show_guide=TRUE) +
geom_histogram(binwidth=.5, position="dodge") +
geom_vline(xintercep=df2$x,linetype=c(1,3))+
labs(fill='Stochastic',linetype='Deterministic')
df2$x
ggplot(data=df1, aes(x=rating, fill=cond)) +
geom_vline(data=df2,aes(xintercept=x,linetype=factor(cond)),
show_guide=TRUE) +
geom_histogram(binwidth=.5, position="dodge") +
geom_vline(xintercep=df2$x,linetype=c(1,3))
ggplot(data=df1, aes(x=rating, fill=cond)) +
geom_vline(data=df2,aes(xintercept=x,linetype=factor(cond)),
show_guide=TRUE) +
geom_histogram(binwidth=.5, position="dodge") +
geom_vline(xintercept =df2$x,linetype=c(1,3))+
labs(fill='Stochastic',linetype='Deterministic')
ggplot(df1, aes(x=rating, fill=cond)) +
geom_histogram(binwidth=.5, position="dodge") +
geom_vline(data=df2,aes(xintercept=x,linetype=factor(cond)),
show_guide=TRUE) +
labs(fill='Stochastic',linetype='Deterministic')
ggplot(data=df1, aes(x=rating, fill=cond)) +
geom_vline(data=df2,aes(xintercept=x,linetype=factor(cond)),
show_guide=TRUE) +
geom_histogram(binwidth=.5, position="dodge")
set.seed(456)
n <- 20
dfr <- data.frame(
id=rep(1:n, 2),
group=rep(c("1","2"), each=n), value=c(rnorm(n), rnorm(n, sd=1.1))
)
ggplot(data=dfr, mapping=aes(x=id, y=value)) +
geom_line(mapping=aes(colour=group)) +
geom_hline(yintercept=c(-1,1)*qnorm(0.95), color="orange") +
geom_hline(yintercept=c(-1,1)*qnorm(0.99), color="darkred")
View(dfr)
ggplot(data=dfr, mapping=aes(x=id, y=value)) +
geom_line(mapping=aes(colour=group))
ggplot(data=dfr, mapping=aes(x=id, y=value)) +
geom_line(mapping=aes(colour=group)) +
geom_hline(yintercept=c(-1,1)*qnorm(0.95), color="orange")
ggplot(data=dfr, mapping=aes(x=id, y=value)) +
geom_line(mapping=aes(colour=group)) +
geom_hline(mapping=aes(yintercept=c(-1,1)*qnorm(0.95), colour="A")) +
geom_hline(mapping=aes(yintercept=c(-1,1)*qnorm(0.99), colour="B"))
ggplot(data=dfr, mapping=aes(x=id, y=value)) +
geom_line(mapping=aes(colour=group))
ggplot(data=dfr, mapping=aes(x=id, y=value)) +
geom_line(mapping=aes(colour=group)) +
geom_hline(mapping=aes(yintercept=c(-1,1)*qnorm(0.95), colour="A"))
dfr
dfr$yintercept = c(-1,1)*qnorm(0.95)
ggplot(data=dfr, mapping=aes(x=id, y=value)) +
geom_line(mapping=aes(colour=group)) +
geom_hline(mapping=aes(yintercept=c(-1,1)*qnorm(0.95), colour="A")) +
geom_hline(mapping=aes(yintercept=c(-1,1)*qnorm(0.99), colour="B"))
library(ggplot2)
set.seed(42)
coding <- data.frame(V1=rnorm(1000))
lncrna <- data.frame(V1=rlnorm(1000))
library(ggplot2)
ggplot() +
geom_histogram(aes(x=V1, y=(..count..)/sum(..count..), fill="r", colour="r"), alpha=.4, data=coding, stat = "bin") +
geom_histogram(aes(x=V1,y=(..count..)/sum(..count..), fill="b", colour="b"), alpha=.4, data=lncrna, stat = "bin") +
scale_colour_manual(name="group", values=c("r" = "red", "b"="blue"), labels=c("b"="blue values", "r"="red values")) +
scale_fill_manual(name="group", values=c("r" = "red", "b"="blue"), labels=c("b"="blue values", "r"="red values"))
require(reshape2)
df=cbind(blue=mtcars$mpg, red=mtcars$mpg*0.8)
df=melt(df, id.vars=1:2)
ggplot()+geom_histogram(aes(y=(..count..)/sum(..count..),x=value, fill=Var2, color=Var2), alpha=.4, data=df, stat = "bin")
df1 <- data.frame(cond = factor( rep(c("A","B"), each=200) ),
rating = c(rnorm(200),rnorm(200, mean=.8)))
df2 <- data.frame(x=c(.5,1),cond=factor(c("A","B")))
ggplot(df1, aes(x=rating, fill=cond)) +
geom_histogram(binwidth=.5, position="dodge") +
geom_vline(data=df2,aes(xintercept=x,linetype=factor(cond)),
show_guide=TRUE) +
labs(fill='Stochastic',linetype='Deterministic')
library("ggplot2")
df2 <- data.frame(Height=rep(c("low", "high"), each=3),
Month=rep(c("Jan", "Feb", "March"),2),
Trial =c(7, 4, 10, 2, 4, 12),
Success = c(2, 2, 7, 1, 3,  8))
ggplot(data=df2, aes(x=Month, y= Success, fill= Height)) +
ggtitle("Title") +
geom_bar(stat="identity", position=position_dodge()) +
geom_line(aes(x=Month, y=Success/Trial*max(Success), group = Height, linetype = Height, colour = Height) , size = 3, alpha = 0.7) +
geom_point(aes(x=Month, y=Success/Trial*max(Success), colour = Height), size = 11) +
geom_text(aes(label=round(Success/Trial,2), x=Month, y=Success/Trial*max(Success)), color="white", size=3.5, fontface = "bold") +
scale_y_continuous(sec.axis = sec_axis(~. *1/max(df2$Success) , name="Proporion of success")) +
labs(x = "Month", y="#Success", fill = "Number of Success", colour = "Proportion of success") +
scale_colour_manual(values=c('#909999','#E69000'))+
scale_fill_manual(values=c('#099999','#069F00'))
guides(
linetype = FALSE,
fill = guide_legend(override.aes = list(shape = NA))
)
ggplot(data=df2, aes(x=Month, y= Success, fill= Height)) +
ggtitle("Title") +
geom_bar(stat="identity", position=position_dodge()) +
geom_line(aes(x=Month, y=Success/Trial*max(Success), group = Height, linetype = Height, colour = Height) , size = 3, alpha = 0.7) +
geom_point(aes(x=Month, y=Success/Trial*max(Success), colour = Height), size = 11) +
geom_text(aes(label=round(Success/Trial,2), x=Month, y=Success/Trial*max(Success)), color="white", size=3.5, fontface = "bold") +
scale_y_continuous(sec.axis = sec_axis(~. *1/max(df2$Success) , name="Proporion of success")) +
labs(x = "Month", y="#Success", fill = "Number of Success", colour = "Proportion of success") +
scale_colour_manual(values=c('#909999','#E69000'))+
scale_fill_manual(values=c('#099999','#069F00'))+
guides(
linetype = FALSE,
fill = guide_legend(override.aes = list(shape = NA))
)
library(R.matlab)
help(writeMat)
write.table(1,"./users/tianpeng/desktop/test.m",quote = F,row.names = F)
write.table(1,"/users/tianpeng/desktop/test.m",quote = F,row.names = F)
CESMsim_path = "filepath = '/WORK/tsinghua_fteng_1/Twowaycouple/mycase/run/'";
write.table(CESMsim_path,"./users/tianpeng/desktop/Path.m",quote = F,row.names = F,col.names = F)
write.table(CESMsim_path,"/users/tianpeng/desktop/Path.m",quote = F,row.names = F,col.names = F)
data = read.csv("/users/tianpeng/downloads/Target_year_gms.csv",quote = F,row.names = F)
data = read.csv("/users/tianpeng/downloads/Target_year_gms.csv",header = F)
View(data)
write.csv(data,"/users/tianpeng/downloads/Target_year.csv",quote = F,row.names = F,col.names = F)
help(write.csv)
write.csv(data,"/users/tianpeng/downloads/Target_year.csv",quote = F,row.names = 1,col.names = F)
write.table( data,"/users/tianpeng/downloads/Target_year.csv", sep=",",  col.names=FALSE)
write.table( data,"/users/tianpeng/downloads/Target_year.csv", sep=",",  col.names=FALSE,row.names = F)
data = read.csv("/users/tianpeng/downloads/Target_year_gms.csv",header = F)
data
Timestep = c(2014,2018,seq(2020,2100,by=5));
target_year=2018;
which(target_year %in% Timestep)
target_year %in% Timestep
which(Timestep== target_year)
data = read.csv("/users/tianpeng/downloads/Target_year_gms.csv",header = F)
data
data$V2
3.99/69.6
86.3/1080
3.99/(69.6-3.99)
86.3/(1080-86.3)
32/125
library("ClimDown")
install.packages("ClimDown")
install.packages("udunits2")
install.packages('udunits2', type = 'source', repo = 'cran.rstudio.com', configure.args = "--with-udunits2-lib=/usr/local/Cellar/udunits/2.2.20/lib/")
install.packages("ClimDown")
install.packages('udunits2', type = 'source', repo = 'cran.rstudio.com', configure.args = "--with-udunits2-lib=/usr/local/Cellar/udunits/2.2.20/lib/")
install.packages("units",
configure.args = c("--with-udunits2-include=/usr/include/udunits2",
"--with-udunits2-lib=/usr/lib64"),
type = "source")
install.packages('udunits2', type = 'source', repo = 'cran.rstudio.com')
install.packages("udunits2_0.13.tar.gz",configure.args='--with-udunits2-include=/usr/include/udunits2')
install.packages('udunits2', type = 'source', repo = 'cran.rstudio.com', configure.args = "--with-udunits2-lib=/usr/local/Cellar/udunits/2.2.20/lib/")
720*360*81
720*360*81*365
720*360*720
-0.047*100
exp(4)
0.047*300
exp(14)
exp(0.047*100)
exp(0.047*200)
exp(0.01*200)
exp(0.01*300)
exp(0.03*300)
exp(0.033*200)
exp(0.046*200)
exp(0.046*100)
exp(0.047)
exp(0.047*100)
exp(0.047*80)
exp(0.047*80)
exp(0.047*90)
exp(0.047*90)
exp(0.047*50)
install.packages("CMIP6tools")
library(devtools)
devtools::install_github("CUG-atmos/CMIP6tools")
devtools::install_github("CUG-atmos/CMIP6tools")
devtools::install_github("CUG-atmos/CMIP6tools")
273.15+12.5
213.157/0.0418
213.157/0.0418/0.38
(1-0.01)^90
(1-0.011)^90
0.404732-0.3695441
(1-0.011)^10
(1-0.01)^10
0.01/0.9043821
0.95^0.1
0.005
(1-0.011)^10
(1-0.01)^10
(1-0.015)^10
(1-0.01)^90
(1-0.015)^90
0.95^90
2020
2025
5%
0.05
0.95^10
0.0995^10
0.995^10
0.995^00
0.995^90
5^6
library(ggplot2)
gdp <- data.frame("Country"=rep(c("China", "USA"), each=2),
"Type"=rep(c("GDP2013", "GDP2014"), 2),
"Cnt"= c(16220, 3560, 34030, -10570))
gdp <- gdp %>%
mutate(start=Cnt,
start=lag(start),
end=ifelse(Type=="GDP2013", Cnt, start+Cnt),
start=ifelse(Type=="GDP2013", 0, start),
amount=end-start,
id=rep(1:2, each=2))
gdp %>%
ggplot(aes(fill=Type)) +
geom_rect(stat="identity", aes(x=Country,
xmin=id-0.25,
xmax=id+0.25,
ymin=start,
ymax=end))
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
gdp <- data.frame("Country"=rep(c("China", "USA"), each=2),
"Type"=rep(c("GDP2013", "GDP2014"), 2),
"Cnt"= c(16220, 3560, 34030, -10570))
gdp <- gdp %>%
mutate(start=Cnt,
start=lag(start),
end=ifelse(Type=="GDP2013", Cnt, start+Cnt),
start=ifelse(Type=="GDP2013", 0, start),
amount=end-start,
id=rep(1:2, each=2))
gdp %>%
ggplot(aes(fill=Type)) +
geom_rect(stat="identity", aes(x=Country,
xmin=id-0.25,
xmax=id+0.25,
ymin=start,
ymax=end))
gdp %>%
ggplot(aes(fill=Type)) +
geom_rect(stat="identity", position = "dodge",aes(x=Country,
xmin=id-0.25,
xmax=id+0.25,
ymin=start,
ymax=end))
gdp
gdp %>%
ggplot(aes(fill=Type)) +
geom_rect(stat="identity", position = "dodge",aes(x=Country,
xmin=id-0.25,
xmax=id+0.25,
ymin=start,
ymax=end))+
facet_grid(.~id)
225.5352/17.9464
28.9179/0.7541
16875.0011487343 - 13244.9323441842
1275.71326573188+636.169583336485
37.83+3.09+69.91+694.45
install.packages('Rcpp')
setwd('/Users/tianpeng/Downloads/BDD2018-master')
rm(list=ls())
library(readstata13)
library(dplyr)
library(data.table)
library(lfe)
'%&%' <- function(x,y) paste0(x,y)
select <- dplyr::select
shift <- data.table::shift
dir.create('data/output')
dta <- read.dta13('data/input/GrowthClimateDataset_Stata13.dta')
dta <- read.dta13('data/input/GrowthClimateDataset_Stata13.dta') %>%
select(iso, country = countryname, year, pop = Pop, gdp = TotGDP, growth = growthWDI,temp = UDel_temp_popweight, prec = UDel_precip_popweight) %>%
mutate(temp2 = temp^2, prec2 = prec^2, time = year-1960, time2 = time^2) %>%
filter(!(iso %in% c('COD', 'ROU'))) %>%
mutate(iso = replace(iso, which(iso=='ZAR'), 'COD')) %>%
mutate(iso = replace(iso, which(iso=='ROM'), 'ROU')) %>% na.omit() %>%
group_by(iso) %>% arrange(iso, year) %>%
# Add lag variables
do(data.frame(., setNames(shift(.$temp, 1:5), paste0('temp.l', 1:5)))) %>%
do(data.frame(., setNames(shift(.$temp2, 1:5), paste0('temp2.l', 1:5)))) %>%
do(data.frame(., setNames(shift(.$prec, 1:5), paste0('prec.l', 1:5)))) %>%
do(data.frame(., setNames(shift(.$prec2, 1:5), paste0('prec2.l', 1:5)))) %>%
as.data.frame()
# Save baseline data for later
baseline <- dta %>%
filter(year >= 2000) %>%
group_by(iso) %>% summarize(meantemp = mean(temp),
gdp = mean(gdp),
growth = mean(growth),
gdpcap = mean(gdp/pop),
pop = mean(pop)) %>% as.data.frame
# Dummy for whether country is below median GDP
baseline$poor <- baseline$gdpcap < quantile(baseline$gdpcap, 0.5)
save(baseline, file = 'data/output/baseline.Rdata')
View(baseline)
View(dta)
#### PART 2: Running different bootstrap specifications ####
## Shorthand for terms in the various specifications
# Time trends
iso <- unique(dta$iso)
for (y in 1:length(iso)){
dta[,'timelin'%&%iso[y]] <- as.numeric(dta$iso==iso[y])*dta$time
dta[,'timequad'%&%iso[y]] <- as.numeric(dta$iso==iso[y])*dta$time2
}
trend.lin <- names(dta)[substr(names(dta), 1, 7)=='timelin'] %>%
paste0(' + ') %>% as.list %>% do.call(paste0, .)
trend.quad <- names(dta)[substr(names(dta), 1, 8)=='timequad'] %>%
paste0(' + ') %>% as.list %>% do.call(paste0, .)
# Lagged climate variables
temp.lags <- names(dta)[substr(names(dta), 1, 6)=='temp.l'] %>%
paste0(' + ') %>% as.list %>% do.call(paste0, .)
temp2.lags <- names(dta)[substr(names(dta), 1, 7)=='temp2.l'] %>%
paste0(' + ') %>% as.list %>% do.call(paste0, .)
prec.lags <- names(dta)[substr(names(dta), 1, 6)=='prec.l'] %>%
paste0(' + ') %>% as.list %>% do.call(paste0, .)
prec2.lags <- names(dta)[substr(names(dta), 1, 7)=='prec2.l'] %>%
paste0(' + ') %>% as.list %>% do.call(paste0, .)
# Lag specifications as formula objects
lag0.form <- as.formula('growth ~ temp + temp2 + '%&%trend.lin%&%trend.quad%&%'prec + prec2 | iso + year')
lag0.form
lag1.form <- as.formula('growth ~ temp + temp2 + temp.l1 + temp2.l1 + prec.l1 + prec2.l1 +'%&%trend.lin%&%trend.quad%&%'prec + prec2 | iso + year')
lag5.form <- as.formula('growth ~ temp + temp2 + '%&%temp.lags%&%temp2.lags%&%prec.lags%&%prec2.lags%&%trend.lin%&%trend.quad%&%'prec + prec2 | iso + year')
# Suppress warnings from inclusion of unused regressors. Regression results are not affected by their inclusion.
options(warn = -1)
# Set number of bootstraps. Changes here will carry over to all other scripts.
N = 1000
## Bootstrap, sampling by countries (with three different lag specifications)
set.seed(94305)
bootC0 <- bootC1 <- bootC5 <- array(dim=c(N+1,2))
for (j in 1:(N+1)){
cl  <- sample(iso, size = length(iso), replace=T)
df.bs <- sapply(cl, function(x) which(dta[,'iso']==x))
dta.boot <- if(j==1) dta else{dta[unlist(df.bs),]} # First row uses all observations
mod0 <- felm(lag0.form, data = dta.boot)
mod1 <- felm(lag1.form, data = dta.boot)
mod1.temp <- sum(mod1$coefficients[c(1,3)])
mod1.temp2 <- sum(mod1$coefficients[c(2,4)])
mod5 <- felm(lag5.form, data = dta.boot)
mod5.temp <- sum(mod5$coefficients[c(1,3:7)])
mod5.temp2 <- sum(mod5$coefficients[c(2,8:12)])
bootC0[j,] <- mod0$coefficients[1:2]
bootC1[j,] <- c(mod1.temp, mod1.temp2)
bootC5[j,] <- c(mod5.temp, mod5.temp2)
if(j%%50==0){print(j)}
}
## Bootstrap, sampling by five-year blocks (roughly the length of a business cycle)
set.seed(94305)
dta$yrgroup <- round((dta$year+2)/5)*5  # Assigns each year to one of 10 disjoint blocks
yrg <- unique(dta$yrgroup)
bootYR <- array(dim=c(N+1,2))
for (j in 1:(N+1)) {
cl  <- sample(yrg, size = length(yrg), replace=T)
df.bs <- sapply(cl, function(x) which(dta[,'yrgroup']==x))
dta.boot <- dta[unlist(df.bs),]
mod <- felm(lag0.form, data=dta.boot )
bootYR[j,] <- mod$coefficients[1:2]
if(j%%50==0){print(j)}
}
options(warn = 0) # Turn off warning suppressor
boots <- rbind(data.frame(bootC0, spec = 'country-lag0'),
data.frame(bootC1, spec = 'country-lag1'),
data.frame(bootC5, spec = 'country-lag5'),
data.frame(bootY, spec = 'year'),
data.frame(bootYR, spec = 'year-blocks')) %>%
data.frame(boot = 0:1000) %>%
rename(b1 = X1, b2 = X2) %>%
mutate(optimal = -b1/(2*b2),
normalize = b2*optimal^2+b1*optimal) %>%
mutate_at('spec', as.character)
save(boots, file = 'data/output/boots.Rdata')
boots <- rbind(data.frame(bootC0, spec = 'country-lag0'),
data.frame(bootC1, spec = 'country-lag1'),
data.frame(bootC5, spec = 'country-lag5'),
data.frame(bootY, spec = 'year'),
data.frame(bootYR, spec = 'year-blocks')) %>%
data.frame(boot = 0:1000) %>%
rename(b1 = X1, b2 = X2) %>%
mutate(optimal = -b1/(2*b2),
normalize = b2*optimal^2+b1*optimal) %>%
mutate_at('spec', as.character)
bootYR
rbind(data.frame(bootC0, spec = 'country-lag0'),
data.frame(bootC1, spec = 'country-lag1'),
data.frame(bootC5, spec = 'country-lag5'),
data.frame(bootY, spec = 'year'),
data.frame(bootYR, spec = 'year-blocks'))
set.seed(94305)
bootY <- array(dim=c(N+1,2))
yrs <- unique(dta$year)
for (j in 1:(N+1)){
cl  <- sample(yrs, size = length(yrs), replace=T)
df.bs <- sapply(cl, function(x) which(dta[,'year']==x))
dta.boot <- dta[unlist(df.bs),]
mod <- felm(lag0.form, data=dta.boot)
bootY[j,] <- mod$coefficients[1:2]
if(j%%50==0){print(j)}
}
boots <- rbind(data.frame(bootC0, spec = 'country-lag0'),
data.frame(bootC1, spec = 'country-lag1'),
data.frame(bootC5, spec = 'country-lag5'),
data.frame(bootY, spec = 'year'),
data.frame(bootYR, spec = 'year-blocks')) %>%
data.frame(boot = 0:1000) %>%
rename(b1 = X1, b2 = X2) %>%
mutate(optimal = -b1/(2*b2),
normalize = b2*optimal^2+b1*optimal) %>%
mutate_at('spec', as.character)
save(boots, file = 'data/output/boots.Rdata')
View(boots)
load("/Users/tianpeng/Desktop/nonCO2-cost/Damage_model/Burke_damage/baseline.Rdata")
load("/Users/tianpeng/Desktop/nonCO2-cost/Damage_model/Burke_damage/baseline.Rdata")
View(baseline)
setwd('/Users/tianpeng/Desktop/nonCO2-cost/Damage_model/Burke_damage/BDD2018-master')
rm(list=ls())
library(readstata13)
library(dplyr)
library(data.table)
library(lfe)
'%&%' <- function(x,y) paste0(x,y)
select <- dplyr::select
shift <- data.table::shift
dir.create('data/output')
#### PART 1: Historical Dataset ####
dta <- read.dta13('data/input/GrowthClimateDataset_Stata13.dta') %>%
select(iso, country = countryname, year, pop = Pop, gdp = TotGDP, growth = growthWDI,temp = UDel_temp_popweight, prec = UDel_precip_popweight) %>%
mutate(temp2 = temp^2, prec2 = prec^2, time = year-1960, time2 = time^2) %>%
filter(!(iso %in% c('COD', 'ROU'))) %>%
mutate(iso = replace(iso, which(iso=='ZAR'), 'COD')) %>%
mutate(iso = replace(iso, which(iso=='ROM'), 'ROU')) %>% na.omit() %>%
group_by(iso) %>% arrange(iso, year) %>%
# Add lag variables
do(data.frame(., setNames(shift(.$temp, 1:5), paste0('temp.l', 1:5)))) %>%
do(data.frame(., setNames(shift(.$temp2, 1:5), paste0('temp2.l', 1:5)))) %>%
do(data.frame(., setNames(shift(.$prec, 1:5), paste0('prec.l', 1:5)))) %>%
do(data.frame(., setNames(shift(.$prec2, 1:5), paste0('prec2.l', 1:5)))) %>%
as.data.frame()
load("/Users/tianpeng/Desktop/nonCO2-cost/Damage_model/Burke_damage/BDD2018-master/data/output/baseline.Rdata")
View(baseline)
load("/Users/tianpeng/Desktop/nonCO2-cost/Damage_model/Burke_damage/baseline.Rdata")
